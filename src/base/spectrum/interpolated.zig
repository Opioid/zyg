const math = @import("../math/math.zig");
const memory = @import("../memory/bound.zig");

const std = @import("std");

pub const Interpolated = struct {
    num_elements: u32,

    wavelengths: [*]const f32,
    intensities: [*]const f32,

    const Self = @This();

    pub fn init(wavelengths: []const f32, intensities: []const f32) Self {
        return Self{
            .num_elements = @intCast(u32, wavelengths.len),
            .wavelengths = wavelengths.ptr,
            .intensities = intensities.ptr,
        };
    }

    pub fn startWavelength(self: Self) f32 {
        return self.wavelengths[0];
    }

    pub fn endWavelength(self: Self) f32 {
        return self.wavelengths[self.num_elements - 1];
    }

    pub fn evaluate(self: Self, wl: f32) f32 {
        const range = memory.equalRange(f32, self.wavelengths[0..self.num_elements], wl);
        const index = range[0];

        if (range[0] == range[1]) {
            const wl0 = self.wavelengths[index - 1];
            const wl1 = self.wavelengths[index];

            const int0 = self.intensities[index - 1];
            const int1 = self.intensities[index];

            return math.lerp(int0, int1, (wl - wl0) / (wl1 - wl0));
        }

        return self.intensities[index];
    }

    pub fn integrate(self: Self, a: f32, b: f32) f32 {
        const len = self.num_elements;
        if (len < 2) {
            return 0.0;
        }

        const start = math.max(a, self.startWavelength());
        const end = math.min(b, self.endWavelength());
        if (end <= start) {
            return 0.0;
        }

        // This integration is only correct for a linearly interpolated function
        // and clamps to zero outside the given range.

        const it = memory.lowerBound(f32, self.wavelengths[0..len], start);

        var index = @max(it, 1) - 1;

        var integral: f32 = 0.0;
        while (index + 1 < len and end >= self.wavelengths[index]) : (index += 1) {
            const wl0 = self.wavelengths[index];
            const wl1 = self.wavelengths[index + 1];

            const c0 = math.max(wl0, start);
            const c1 = math.min(wl1, end);

            if (c1 <= c0) {
                continue;
            }

            const int0 = self.intensities[index];
            const int1 = self.intensities[index + 1];
            const inv = 1.0 / (wl1 - wl0);

            const interp0 = math.lerp(int0, int1, (c0 - wl0) * inv);
            const interp1 = math.lerp(int0, int1, (c1 - wl0) * inv);

            integral += 0.5 * (interp0 + interp1) * (c1 - c0);
        }

        return integral;
    }
};

pub const Num_wavelenghts = 64;

pub const RGB_to_spectrum_wavelengths = [Num_wavelenghts]f32{
    380.000000, 385.396825, 390.793651, 396.190476, 401.587302, 406.984127, 412.380952, 417.777778,
    423.174603, 428.571429, 433.968254, 439.365079, 444.761905, 450.158730, 455.555556, 460.952381,
    466.349206, 471.746032, 477.142857, 482.539683, 487.936508, 493.333333, 498.730159, 504.126984,
    509.523810, 514.920635, 520.317460, 525.714286, 531.111111, 536.507937, 541.904762, 547.301587,
    552.698413, 558.095238, 563.492063, 568.888889, 574.285714, 579.682540, 585.079365, 590.476190,
    595.873016, 601.269841, 606.666667, 612.063492, 617.460317, 622.857143, 628.253968, 633.650794,
    639.047619, 644.444444, 649.841270, 655.238095, 660.634921, 666.031746, 671.428571, 676.825397,
    682.222222, 687.619048, 693.015873, 698.412698, 703.809524, 709.206349, 714.603175, 720.000000,
};

// generated with a whitepoint of wx = .3333; wy = .3333;
pub const RGB_reflector_to_spectrum_white = [Num_wavelenghts]f32{
    1.061030, 1.059838, 1.062381, 1.062877, 1.063021, 1.061923, 1.061572, 1.062888,
    1.061735, 1.063289, 1.063161, 1.062499, 1.061470, 1.062636, 1.062777, 1.062895,
    1.061217, 1.061067, 1.061336, 1.062410, 1.063127, 1.063037, 1.063283, 1.061749,
    1.062540, 1.061177, 1.062098, 1.060538, 1.059377, 1.061063, 1.062865, 1.060886,
    1.062381, 1.062384, 1.063466, 1.061229, 1.063220, 1.063023, 1.062498, 1.063319,
    1.062335, 1.062652, 1.061961, 1.063016, 1.061222, 1.063538, 1.062553, 1.061745,
    1.061511, 1.062751, 1.061349, 1.061164, 1.061145, 1.063114, 1.062570, 1.059913,
    1.059869, 1.062575, 1.059916, 1.061512, 1.062366, 1.062366, 1.062525, 1.062799,
};

pub const RGB_reflector_to_spectrum_cyan = [Num_wavelenghts]f32{
    1.051672, 1.054489, 1.053767, 1.039506, 1.025542, 1.012466, 1.001296, 0.993209,
    0.990312, 0.995077, 1.008785, 1.029902, 1.054126, 1.051265, 1.054520, 1.054375,
    1.054375, 1.054112, 1.054381, 1.053659, 1.054385, 1.054433, 1.054494, 1.054539,
    1.054434, 1.054237, 1.054439, 1.054493, 1.054491, 1.054430, 1.054277, 1.054424,
    1.054539, 1.054501, 1.054521, 1.054169, 1.054169, 0.928620, 0.732266, 0.507465,
    0.292186, 0.117396, 0.011849, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000101, 0.000100, 0.000127, 0.000181, 0.000165, 0.002356, 0.003305, 0.003581,
};

pub const RGB_reflector_to_spectrum_magenta = [Num_wavelenghts]f32{
    1.005960, 1.005414,  1.003419,  1.006313,  1.006970,  1.006177,  1.006667,  1.006639,
    1.006342, 1.006533,  1.006547,  1.006796,  1.006420,  1.006834,  1.004855,  1.005941,
    1.006866, 1.006968,  1.006970,  0.955928,  0.775710,  0.531572,  0.286389,  0.089253,
    0.005278, -0.000028, -0.002180, -0.002871, -0.002494, -0.001886, -0.001075, -0.000071,
    0.001112, 0.002683,  0.006203,  0.011105,  0.082030,  0.251454,  0.478924,  0.703292,
    0.895387, 1.002884,  1.006505,  1.006575,  1.006773,  1.006648,  1.005659,  1.006503,
    1.006474, 1.005693,  1.006694,  1.006565,  1.006628,  1.006604,  1.006696,  1.005397,
    1.006668, 1.004931,  1.004739,  1.006750,  1.005938,  1.006553,  1.006328,  1.005428,
};

pub const RGB_reflector_to_spectrum_yellow = [Num_wavelenghts]f32{
    0.049450, 0.047064, 0.046437, 0.044339, 0.043039, 0.041840, 0.040256, 0.040950,
    0.036703, 0.041124, 0.038681, 0.035959, 0.039774, 0.049554, 0.065018, 0.092801,
    0.127998, 0.179587, 0.251809, 0.336173, 0.438699, 0.548859, 0.666307, 0.797719,
    0.926099, 1.049559, 1.049172, 1.049867, 1.046958, 1.046609, 1.049866, 1.049826,
    1.049863, 1.049841, 1.049846, 1.049946, 1.049558, 1.049466, 1.049922, 1.049777,
    1.049779, 1.049684, 1.049947, 1.049897, 1.049867, 1.049855, 1.049239, 1.049232,
    1.049801, 1.049841, 1.049394, 1.049807, 1.049818, 1.049777, 1.049933, 1.049822,
    1.049756, 1.049651, 1.049801, 1.046984, 1.049946, 1.049456, 1.049784, 1.049854,
};

pub const RGB_reflector_to_spectrum_red = [Num_wavelenghts]f32{
    0.170703, 0.168403, 0.167387, 0.165440, 0.163462, 0.155088, 0.142358, 0.131586,
    0.106832, 0.073255, 0.044089, 0.014094, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.032369, 0.351654, 0.744498,
    1.004733, 1.004527, 1.004756, 1.004755, 1.004738, 1.004688, 1.004751, 1.004753,
    1.004749, 1.004729, 1.004702, 1.003914, 1.004744, 1.004360, 1.004734, 1.003129,
    1.004487, 1.004335, 1.004087, 1.004740, 1.003911, 1.004729, 1.004195, 1.004756,
};

pub const RGB_reflector_to_spectrum_green = [Num_wavelenghts]f32{
    0.000753, 0.000300, 0.001266, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.004897, 0.106573, 0.261636, 0.457782, 0.665053, 0.848654, 0.992186, 0.999885,
    0.999952, 0.999922, 0.999955, 0.999974, 0.999954, 0.999962, 0.999916, 0.999966,
    0.999958, 0.999985, 0.999529, 0.999894, 0.974529, 0.868339, 0.712902, 0.529373,
    0.336848, 0.174599, 0.053530, 0.001638, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.006536, 0.000100, 0.000100, 0.000100, 0.004099, 0.007370, 0.008285, 0.004014,
};

pub const RGB_reflector_to_spectrum_blue = [Num_wavelenghts]f32{
    0.947148, 0.948021, 0.945754, 0.967222, 0.985207, 0.975869, 0.999998, 1.000000,
    0.999498, 0.996392, 0.999524, 0.999971, 0.999970, 0.999986, 0.999890, 1.000000,
    0.984324, 0.945557, 0.844596, 0.733946, 0.616532, 0.498881, 0.386794, 0.278527,
    0.182345, 0.102627, 0.042541, 0.006867, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100, 0.000100,
    0.000100, 0.000100, 0.004070, 0.010824, 0.020398, 0.029300, 0.035446, 0.041237,
    0.045790, 0.049579, 0.052427, 0.053220, 0.055300, 0.057031, 0.058071, 0.058072,
    0.058274, 0.058004, 0.058075, 0.058514, 0.058566, 0.058930, 0.059622, 0.059874,
};
