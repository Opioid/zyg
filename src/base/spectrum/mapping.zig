const spectrum = @import("xyz.zig");
const Vec4f = @import("../math/vector4.zig").Vec4f;

const std = @import("std");

pub fn blackbody(temperature: f32) Vec4f {
    const wl_min = 380.0;
    const wl_max = 780.0;
    const wl_step = 5.0;

    const num_steps = @floatToInt(u32, (wl_max - wl_min) / wl_step) + 1;

    var xyz = @splat(4, @as(f32, 0.0));
    var k: u32 = 0;
    while (k < num_steps) : (k += 1) {
        // convert to nanometer
        const wl = (wl_min + @intToFloat(f32, k) * wl_step) * 1.0e-9;
        const p = planck(temperature, wl);

        xyz[0] += p * color_matching[k][0];
        xyz[1] += p * color_matching[k][1];
        xyz[2] += p * color_matching[k][2];
    }

    // normalize the result
    xyz /= @splat(4, @maximum(xyz[0], @maximum(xyz[1], xyz[2])));

    return @maximum(spectrum.XYZ_to_sRGB(xyz), @splat(4, @as(f32, 0.0)));
}

fn planck(temperature: f32, wavelength: f32) f32 {
    const h = 6.62606896e-34; // Plank constant
    const c = 2.99792458e+8; // Speed of light
    const k = 1.38064880e-23; // Boltzmann constant
    const a = ((2.0 * std.math.pi) * h) * (c * c);
    const b = (h * c) / k;
    return (a * std.math.pow(f32, wavelength, -5.0)) / (@exp(b / (wavelength * temperature)) - 1.0);
}

// CIE color matching functions
const color_matching = [_][3]f32{
    [3]f32{ 0.0014, 0.0000, 0.0065 }, [3]f32{ 0.0022, 0.0001, 0.0105 }, [3]f32{ 0.0042, 0.0001, 0.0201 },
    [3]f32{ 0.0076, 0.0002, 0.0362 }, [3]f32{ 0.0143, 0.0004, 0.0679 }, [3]f32{ 0.0232, 0.0006, 0.1102 },
    [3]f32{ 0.0435, 0.0012, 0.2074 }, [3]f32{ 0.0776, 0.0022, 0.3713 }, [3]f32{ 0.1344, 0.0040, 0.6456 },
    [3]f32{ 0.2148, 0.0073, 1.0391 }, [3]f32{ 0.2839, 0.0116, 1.3856 }, [3]f32{ 0.3285, 0.0168, 1.6230 },
    [3]f32{ 0.3483, 0.0230, 1.7471 }, [3]f32{ 0.3481, 0.0298, 1.7826 }, [3]f32{ 0.3362, 0.0380, 1.7721 },
    [3]f32{ 0.3187, 0.0480, 1.7441 }, [3]f32{ 0.2908, 0.0600, 1.6692 }, [3]f32{ 0.2511, 0.0739, 1.5281 },
    [3]f32{ 0.1954, 0.0910, 1.2876 }, [3]f32{ 0.1421, 0.1126, 1.0419 }, [3]f32{ 0.0956, 0.1390, 0.8130 },
    [3]f32{ 0.0580, 0.1693, 0.6162 }, [3]f32{ 0.0320, 0.2080, 0.4652 }, [3]f32{ 0.0147, 0.2586, 0.3533 },
    [3]f32{ 0.0049, 0.3230, 0.2720 }, [3]f32{ 0.0024, 0.4073, 0.2123 }, [3]f32{ 0.0093, 0.5030, 0.1582 },
    [3]f32{ 0.0291, 0.6082, 0.1117 }, [3]f32{ 0.0633, 0.7100, 0.0782 }, [3]f32{ 0.1096, 0.7932, 0.0573 },
    [3]f32{ 0.1655, 0.8620, 0.0422 }, [3]f32{ 0.2257, 0.9149, 0.0298 }, [3]f32{ 0.2904, 0.9540, 0.0203 },
    [3]f32{ 0.3597, 0.9803, 0.0134 }, [3]f32{ 0.4334, 0.9950, 0.0087 }, [3]f32{ 0.5121, 1.0000, 0.0057 },
    [3]f32{ 0.5945, 0.9950, 0.0039 }, [3]f32{ 0.6784, 0.9786, 0.0027 }, [3]f32{ 0.7621, 0.9520, 0.0021 },
    [3]f32{ 0.8425, 0.9154, 0.0018 }, [3]f32{ 0.9163, 0.8700, 0.0017 }, [3]f32{ 0.9786, 0.8163, 0.0014 },
    [3]f32{ 1.0263, 0.7570, 0.0011 }, [3]f32{ 1.0567, 0.6949, 0.0010 }, [3]f32{ 1.0622, 0.6310, 0.0008 },
    [3]f32{ 1.0456, 0.5668, 0.0006 }, [3]f32{ 1.0026, 0.5030, 0.0003 }, [3]f32{ 0.9384, 0.4412, 0.0002 },
    [3]f32{ 0.8544, 0.3810, 0.0002 }, [3]f32{ 0.7514, 0.3210, 0.0001 }, [3]f32{ 0.6424, 0.2650, 0.0000 },
    [3]f32{ 0.5419, 0.2170, 0.0000 }, [3]f32{ 0.4479, 0.1750, 0.0000 }, [3]f32{ 0.3608, 0.1382, 0.0000 },
    [3]f32{ 0.2835, 0.1070, 0.0000 }, [3]f32{ 0.2187, 0.0816, 0.0000 }, [3]f32{ 0.1649, 0.0610, 0.0000 },
    [3]f32{ 0.1212, 0.0446, 0.0000 }, [3]f32{ 0.0874, 0.0320, 0.0000 }, [3]f32{ 0.0636, 0.0232, 0.0000 },
    [3]f32{ 0.0468, 0.0170, 0.0000 }, [3]f32{ 0.0329, 0.0119, 0.0000 }, [3]f32{ 0.0227, 0.0082, 0.0000 },
    [3]f32{ 0.0158, 0.0057, 0.0000 }, [3]f32{ 0.0114, 0.0041, 0.0000 }, [3]f32{ 0.0081, 0.0029, 0.0000 },
    [3]f32{ 0.0058, 0.0021, 0.0000 }, [3]f32{ 0.0041, 0.0015, 0.0000 }, [3]f32{ 0.0029, 0.0010, 0.0000 },
    [3]f32{ 0.0020, 0.0007, 0.0000 }, [3]f32{ 0.0014, 0.0005, 0.0000 }, [3]f32{ 0.0010, 0.0004, 0.0000 },
    [3]f32{ 0.0007, 0.0002, 0.0000 }, [3]f32{ 0.0005, 0.0002, 0.0000 }, [3]f32{ 0.0003, 0.0001, 0.0000 },
    [3]f32{ 0.0002, 0.0001, 0.0000 }, [3]f32{ 0.0002, 0.0001, 0.0000 }, [3]f32{ 0.0001, 0.0000, 0.0000 },
    [3]f32{ 0.0001, 0.0000, 0.0000 }, [3]f32{ 0.0001, 0.0000, 0.0000 }, [3]f32{ 0.0000, 0.0000, 0.0000 },
};
